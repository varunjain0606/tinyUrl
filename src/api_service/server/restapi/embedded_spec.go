// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the documentation for TinyUrl API Service.\u003cbr\u003e",
    "title": "TinyUrl API Service",
    "version": "1.0.0"
  },
  "host": "api.shortener.com",
  "paths": {
    "/v1/tinyUrl/url": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create shortnened URL from original URL.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "urlShortener"
        ],
        "summary": "Create shortnened URL from original URL.",
        "operationId": "CreateShortenedUrl",
        "parameters": [
          {
            "description": "URL payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/create_shorturl_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "message": {
                  "description": "Response message of the API",
                  "type": "string",
                  "x-nullable": false,
                  "example": "Generated URL"
                },
                "shortenUrl": {
                  "description": "Shortened URL.",
                  "type": "string",
                  "example": "abdasdsf1"
                },
                "status": {
                  "description": "Job status",
                  "type": "string",
                  "enum": [
                    "COMPLETED",
                    "FAILED"
                  ],
                  "x-nullable": false,
                  "example": "INPROGRESS"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/StandardError-400"
          },
          "401": {
            "$ref": "#/responses/StandardError-401"
          },
          "409": {
            "$ref": "#/responses/StandardError-409"
          },
          "500": {
            "$ref": "#/responses/StandardError-500"
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/v1/tinyUrl/url/{shortenUrl}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get original URL from shortened URL.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "urlShortener"
        ],
        "summary": "Get original URL from shortened URL.",
        "operationId": "GetShortenedUrl",
        "parameters": [
          {
            "type": "integer",
            "description": "shortened URL to fetch the original URL.",
            "name": "shortenUrl",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "originalurl"
              ],
              "properties": {
                "originalurl": {
                  "description": "original URL against the shortened URL.",
                  "type": "string",
                  "example": "www.google.com/asfdnsdf"
                },
                "status": {
                  "description": "Get URL status",
                  "type": "string",
                  "enum": [
                    "COMPLETED",
                    "FAILED"
                  ],
                  "x-nullable": false,
                  "example": "COMPLETED"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/StandardError-400"
          },
          "401": {
            "$ref": "#/responses/StandardError-401"
          },
          "404": {
            "$ref": "#/responses/StandardError-404"
          },
          "500": {
            "$ref": "#/responses/StandardError-500"
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "description": "Error response",
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "message": {
          "type": "string",
          "x-nullable": false
        }
      },
      "example": {
        "code": 1994,
        "message": "Out of cheese error! Please reboot the Universe"
      }
    },
    "create_shorturl_request": {
      "description": "Initial payload with shorten URL",
      "type": "object",
      "title": "ShortUrl payload",
      "required": [
        "originalUrl"
      ],
      "properties": {
        "expiryDays": {
          "description": "Expiry time of a URL",
          "type": "integer",
          "format": "int32",
          "default": 30,
          "x-nullable": false,
          "example": 30
        },
        "originalUrl": {
          "description": "original url.",
          "type": "string",
          "x-nullable": false,
          "example": "www.google.com/nafsdfsdgfsfg"
        }
      },
      "x-nullable": false
    }
  },
  "responses": {
    "StandardError-400": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 400,
          "message": "Bad Request or Input"
        }
      }
    },
    "StandardError-401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 401,
          "message": "Unauthorized access attempt"
        }
      }
    },
    "StandardError-403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 403,
          "message": "Access to this resource forbidden"
        }
      }
    },
    "StandardError-404": {
      "description": "Not found",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 404,
          "message": "The resource was not found"
        }
      }
    },
    "StandardError-405": {
      "description": "Method not allowed",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 405,
          "message": "The HTTP method is not allowed for this resource"
        }
      }
    },
    "StandardError-409": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 409,
          "message": "Conflict. Resource already exists"
        }
      }
    },
    "StandardError-500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 500,
          "message": "Internal server error"
        }
      }
    },
    "StandardError-501": {
      "description": "Not Implemented error",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 501,
          "message": "Not Implemented error"
        }
      }
    },
    "StandardError-503": {
      "description": "Service Unavailable",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 503,
          "message": "Service Unavailable"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the documentation for TinyUrl API Service.\u003cbr\u003e",
    "title": "TinyUrl API Service",
    "version": "1.0.0"
  },
  "host": "api.shortener.com",
  "paths": {
    "/v1/tinyUrl/url": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Create shortnened URL from original URL.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "urlShortener"
        ],
        "summary": "Create shortnened URL from original URL.",
        "operationId": "CreateShortenedUrl",
        "parameters": [
          {
            "description": "URL payload",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/create_shorturl_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "message": {
                  "description": "Response message of the API",
                  "type": "string",
                  "x-nullable": false,
                  "example": "Generated URL"
                },
                "shortenUrl": {
                  "description": "Shortened URL.",
                  "type": "string",
                  "example": "abdasdsf1"
                },
                "status": {
                  "description": "Job status",
                  "type": "string",
                  "enum": [
                    "COMPLETED",
                    "FAILED"
                  ],
                  "x-nullable": false,
                  "example": "INPROGRESS"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": 400,
                "message": "Bad Request or Input"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": 401,
                "message": "Unauthorized access attempt"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": 409,
                "message": "Conflict. Resource already exists"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": 500,
                "message": "Internal server error"
              }
            }
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    },
    "/v1/tinyUrl/url/{shortenUrl}": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Get original URL from shortened URL.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "urlShortener"
        ],
        "summary": "Get original URL from shortened URL.",
        "operationId": "GetShortenedUrl",
        "parameters": [
          {
            "type": "integer",
            "description": "shortened URL to fetch the original URL.",
            "name": "shortenUrl",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "status",
                "originalurl"
              ],
              "properties": {
                "originalurl": {
                  "description": "original URL against the shortened URL.",
                  "type": "string",
                  "example": "www.google.com/asfdnsdf"
                },
                "status": {
                  "description": "Get URL status",
                  "type": "string",
                  "enum": [
                    "COMPLETED",
                    "FAILED"
                  ],
                  "x-nullable": false,
                  "example": "COMPLETED"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": 400,
                "message": "Bad Request or Input"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": 401,
                "message": "Unauthorized access attempt"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": 404,
                "message": "The resource was not found"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "examples": {
              "application/json": {
                "code": 500,
                "message": "Internal server error"
              }
            }
          },
          "default": {
            "description": "Unexpected error"
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "description": "Error response",
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "x-nullable": false
        },
        "message": {
          "type": "string",
          "x-nullable": false
        }
      },
      "example": {
        "code": 1994,
        "message": "Out of cheese error! Please reboot the Universe"
      }
    },
    "create_shorturl_request": {
      "description": "Initial payload with shorten URL",
      "type": "object",
      "title": "ShortUrl payload",
      "required": [
        "originalUrl"
      ],
      "properties": {
        "expiryDays": {
          "description": "Expiry time of a URL",
          "type": "integer",
          "format": "int32",
          "default": 30,
          "x-nullable": false,
          "example": 30
        },
        "originalUrl": {
          "description": "original url.",
          "type": "string",
          "x-nullable": false,
          "example": "www.google.com/nafsdfsdgfsfg"
        }
      },
      "x-nullable": false
    }
  },
  "responses": {
    "StandardError-400": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 400,
          "message": "Bad Request or Input"
        }
      }
    },
    "StandardError-401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 401,
          "message": "Unauthorized access attempt"
        }
      }
    },
    "StandardError-403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 403,
          "message": "Access to this resource forbidden"
        }
      }
    },
    "StandardError-404": {
      "description": "Not found",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 404,
          "message": "The resource was not found"
        }
      }
    },
    "StandardError-405": {
      "description": "Method not allowed",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 405,
          "message": "The HTTP method is not allowed for this resource"
        }
      }
    },
    "StandardError-409": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 409,
          "message": "Conflict. Resource already exists"
        }
      }
    },
    "StandardError-500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 500,
          "message": "Internal server error"
        }
      }
    },
    "StandardError-501": {
      "description": "Not Implemented error",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 501,
          "message": "Not Implemented error"
        }
      }
    },
    "StandardError-503": {
      "description": "Service Unavailable",
      "schema": {
        "$ref": "#/definitions/Error"
      },
      "examples": {
        "application/json": {
          "code": 503,
          "message": "Service Unavailable"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
}
