// Code generated by go-swagger; DO NOT EDIT.

package url_shortener

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// CreateShortenedURLHandlerFunc turns a function with the right signature into a create shortened Url handler
type CreateShortenedURLHandlerFunc func(CreateShortenedURLParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateShortenedURLHandlerFunc) Handle(params CreateShortenedURLParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateShortenedURLHandler interface for that can handle valid create shortened Url params
type CreateShortenedURLHandler interface {
	Handle(CreateShortenedURLParams, interface{}) middleware.Responder
}

// NewCreateShortenedURL creates a new http.Handler for the create shortened Url operation
func NewCreateShortenedURL(ctx *middleware.Context, handler CreateShortenedURLHandler) *CreateShortenedURL {
	return &CreateShortenedURL{Context: ctx, Handler: handler}
}

/*CreateShortenedURL swagger:route POST /v1/tinyUrl/url urlShortener createShortenedUrl

Create shortnened URL from original URL.

Create shortnened URL from original URL.

*/
type CreateShortenedURL struct {
	Context *middleware.Context
	Handler CreateShortenedURLHandler
}

func (o *CreateShortenedURL) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateShortenedURLParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateShortenedURLOKBody create shortened URL o k body
// swagger:model CreateShortenedURLOKBody
type CreateShortenedURLOKBody struct {

	// Response message of the API
	// Required: true
	Message string `json:"message"`

	// Shortened URL.
	ShortenURL string `json:"shortenUrl,omitempty"`

	// Job status
	// Required: true
	// Enum: [COMPLETED FAILED]
	Status string `json:"status"`
}

// Validate validates this create shortened URL o k body
func (o *CreateShortenedURLOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateShortenedURLOKBody) validateMessage(formats strfmt.Registry) error {

	if err := validate.RequiredString("createShortenedUrlOK"+"."+"message", "body", string(o.Message)); err != nil {
		return err
	}

	return nil
}

var createShortenedUrlOKBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COMPLETED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createShortenedUrlOKBodyTypeStatusPropEnum = append(createShortenedUrlOKBodyTypeStatusPropEnum, v)
	}
}

const (

	// CreateShortenedURLOKBodyStatusCOMPLETED captures enum value "COMPLETED"
	CreateShortenedURLOKBodyStatusCOMPLETED string = "COMPLETED"

	// CreateShortenedURLOKBodyStatusFAILED captures enum value "FAILED"
	CreateShortenedURLOKBodyStatusFAILED string = "FAILED"
)

// prop value enum
func (o *CreateShortenedURLOKBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createShortenedUrlOKBodyTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *CreateShortenedURLOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("createShortenedUrlOK"+"."+"status", "body", string(o.Status)); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("createShortenedUrlOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateShortenedURLOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateShortenedURLOKBody) UnmarshalBinary(b []byte) error {
	var res CreateShortenedURLOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
