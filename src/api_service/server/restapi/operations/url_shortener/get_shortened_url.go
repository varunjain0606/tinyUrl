// Code generated by go-swagger; DO NOT EDIT.

package url_shortener

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"encoding/json"
	"net/http"

	errors "github.com/go-openapi/errors"
	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
	validate "github.com/go-openapi/validate"
)

// GetShortenedURLHandlerFunc turns a function with the right signature into a get shortened Url handler
type GetShortenedURLHandlerFunc func(GetShortenedURLParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetShortenedURLHandlerFunc) Handle(params GetShortenedURLParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetShortenedURLHandler interface for that can handle valid get shortened Url params
type GetShortenedURLHandler interface {
	Handle(GetShortenedURLParams, interface{}) middleware.Responder
}

// NewGetShortenedURL creates a new http.Handler for the get shortened Url operation
func NewGetShortenedURL(ctx *middleware.Context, handler GetShortenedURLHandler) *GetShortenedURL {
	return &GetShortenedURL{Context: ctx, Handler: handler}
}

/*GetShortenedURL swagger:route GET /v1/tinyUrl/url/{shortenUrl} urlShortener getShortenedUrl

Get original URL from shortened URL.

Get original URL from shortened URL.

*/
type GetShortenedURL struct {
	Context *middleware.Context
	Handler GetShortenedURLHandler
}

func (o *GetShortenedURL) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetShortenedURLParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetShortenedURLOKBody get shortened URL o k body
// swagger:model GetShortenedURLOKBody
type GetShortenedURLOKBody struct {

	// original URL against the shortened URL.
	// Required: true
	Originalurl *string `json:"originalurl"`

	// Get URL status
	// Required: true
	// Enum: [COMPLETED FAILED]
	Status string `json:"status"`
}

// Validate validates this get shortened URL o k body
func (o *GetShortenedURLOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOriginalurl(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetShortenedURLOKBody) validateOriginalurl(formats strfmt.Registry) error {

	if err := validate.Required("getShortenedUrlOK"+"."+"originalurl", "body", o.Originalurl); err != nil {
		return err
	}

	return nil
}

var getShortenedUrlOKBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["COMPLETED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getShortenedUrlOKBodyTypeStatusPropEnum = append(getShortenedUrlOKBodyTypeStatusPropEnum, v)
	}
}

const (

	// GetShortenedURLOKBodyStatusCOMPLETED captures enum value "COMPLETED"
	GetShortenedURLOKBodyStatusCOMPLETED string = "COMPLETED"

	// GetShortenedURLOKBodyStatusFAILED captures enum value "FAILED"
	GetShortenedURLOKBodyStatusFAILED string = "FAILED"
)

// prop value enum
func (o *GetShortenedURLOKBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, getShortenedUrlOKBodyTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (o *GetShortenedURLOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.RequiredString("getShortenedUrlOK"+"."+"status", "body", string(o.Status)); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("getShortenedUrlOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetShortenedURLOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetShortenedURLOKBody) UnmarshalBinary(b []byte) error {
	var res GetShortenedURLOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
